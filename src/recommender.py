import logging
from utils.custom_exception import CustomException
from langchain.chains import RetrievalQA
from langchain_groq import ChatGroq
from langchain.prompts import PromptTemplate
from src.prompt_template import get_anime_prompt
from pydantic import SecretStr

class AnimeRecommender:
    """
    A class to handle anime recommendation generation using a retrieval-augmented generation pipeline.
    
    Attributes:
        llm (ChatGroq): The large language model interface.
        prompt (PromptTemplate): Custom prompt template for the recommender.
        qa_chain (RetrievalQA): The question-answering chain using retriever and LLM.
    """
    llm: ChatGroq
    prompt: PromptTemplate
    qa_chain = RetrievalQA

    def __init__(self, retriever, api_key: str, model_name: str) -> None:
        """
        Initializes the AnimeRecommender with the given retriever, API key, and model name.

        Args:
            retriever: A retriever object for document retrieval.
            api_key (str): The API key to authenticate with ChatGroq.
            model_name (str): The name of the model to be used.
        """
        try:
            logging.info("Initializing AnimeRecommender...")
            self.llm = ChatGroq(api_key=SecretStr(api_key), model=model_name, temperature=0)
            logging.info("LLM initialized successfully.")

            self.prompt = get_anime_prompt()
            logging.info("Prompt template retrieved successfully.")

            self.qa_chain = RetrievalQA.from_chain_type(
                llm=self.llm,
                chain_type="stuff",
                retriever=retriever,
                return_source_documents=True,
                chain_type_kwargs={"prompt": self.prompt}
            )
            logging.info("QA chain initialized successfully.")

        except Exception as e:
            logging.exception("Failed to initialize AnimeRecommender.")
            raise CustomException("Error during AnimeRecommender initialization", e)

    def get_recommendation(self, query: str) -> str:
        """
        Generates an anime recommendation based on the given query.

        Args:
            query (str): The user's input question.

        Returns:
            str: The recommended anime response generated by the QA chain.

        Raises:
            CustomException: If generation fails.
        """
        try:
            logging.info(f"Generating recommendation for query: {query}")
            result = self.qa_chain.invoke({"query": query})
            logging.info("Recommendation generated successfully.")
            return result["result"]
        except Exception as e:
            logging.exception("Failed to generate recommendation.")
            raise CustomException("Error generating recommendation", e)
